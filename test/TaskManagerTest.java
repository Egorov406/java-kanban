
import manager.InMemoryTaskManager;
import manager.TaskManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import status.Status;
import task.Epic;
import task.Subtask;
import task.Task;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

 abstract class TaskManagerTest <T extends TaskManager> {
     protected T taskManager;

     @BeforeEach
     void setUp() {
     }

     @Test
     void addTaskAndGetById() {
         Task task = new Task("Task", "Desc", Duration.ofMinutes(30), LocalDateTime.now());
         taskManager.addTask(task);
         Task retrieved = taskManager.printTaskById(task.getId());
         assertEquals(task, retrieved, "–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID");
     }

     @Test
     void addEpicAndCalculateStatus() {
         Epic epic = new Epic("Epic", "Desc");
         taskManager.addEpic(epic);

         Subtask sub1 = new Subtask("Sub1", "Desc1", Duration.ofMinutes(30), LocalDateTime.now());
         sub1.setEpicId(epic.getId());
         Subtask sub2 = new Subtask("Sub2", "Desc2", Duration.ofMinutes(30), LocalDateTime.now().plusHours(1));
         sub2.setEpicId(epic.getId());
         taskManager.addSubtask(sub1);
         taskManager.addSubtask(sub2);

         assertEquals(Status.NEW, epic.getStatus(), "–°—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ NEW –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å NEW");

         sub1.setStatus(Status.DONE);
         taskManager.updateSubtask(sub1);
         assertEquals(Status.IN_PROGRESS, epic.getStatus(), "–°—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ —Å NEW –∏ DONE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å IN_PROGRESS");

         sub2.setStatus(Status.DONE);
         taskManager.updateSubtask(sub2);
         assertEquals(Status.DONE, epic.getStatus(), "–°—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ DONE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å DONE");

         sub1.setStatus(Status.IN_PROGRESS);
         taskManager.updateSubtask(sub1);
         assertEquals(Status.IN_PROGRESS, epic.getStatus(), "–°—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ —Å IN_PROGRESS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å IN_PROGRESS");
     }

     @Test
     void checkTaskOverlap() {
         Task task1 = new Task("Task1", "Desc", Duration.ofMinutes(60), LocalDateTime.now());
         taskManager.addTask(task1);

         Task task2 = new Task("Task2", "Desc", Duration.ofMinutes(30), LocalDateTime.now().plusMinutes(30));
         assertThrows(IllegalStateException.class, () -> taskManager.addTask(task2), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏");

         Task task3 = new Task("Task3", "Desc", Duration.ofMinutes(30), LocalDateTime.now().plusHours(2));
         assertDoesNotThrow(() -> taskManager.addTask(task3), "–ó–∞–¥–∞—á–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è");
     }

     @Test
     void getPrioritizedTasks() {
         Task task1 = new Task("Task 1", "Desc", Duration.ofMinutes(30), LocalDateTime.now().plusMinutes(1000));
         Task task3 = new Task("Task 3", "Desc", Duration.ofMinutes(30), LocalDateTime.now().plusMinutes(2000));
         Task task4 = new Task("Task 4", "Desc", Duration.ofMinutes(30), LocalDateTime.now().plusMinutes(3000));

         taskManager.addTask(task1);
         taskManager.addTask(task3);
         taskManager.addTask(task4);

         List<Task> prioritizedTasks = taskManager.getPrioritizedTasks();

         assertNotNull(prioritizedTasks, "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
         assertTrue(prioritizedTasks.size() >= 3, "–í —Å–ø–∏—Å–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –∑–∞–¥–∞—á–∏");

         assertEquals(task1.getId(), prioritizedTasks.get(0).getId(), "–ó–∞–¥–∞—á–∞ 1 –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
         assertEquals(task3.getId(), prioritizedTasks.get(1).getId(), "–ó–∞–¥–∞—á–∞ 3 –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
         assertEquals(task4.getId(), prioritizedTasks.get(2).getId(), "–ó–∞–¥–∞—á–∞ 4 –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
     }


     @Test
     void updateEpicTimes() {
         Epic epic = new Epic("–≠–ø–∏–∫ 1", "–û–ø–∏—Å–∞–Ω–∏–µ 1");

         LocalDateTime now = LocalDateTime.now();

         Subtask subtask1 = new Subtask("–ü–æ–¥–∑–∞–¥–∞—á–∞ 1", "–û–ø–∏—Å–∞–Ω–∏–µ 1", Duration.ofMinutes(30), now.plusMinutes(10));
         Subtask subtask2 = new Subtask("–ü–æ–¥–∑–∞–¥–∞—á–∞ 2", "–û–ø–∏—Å–∞–Ω–∏–µ 2", Duration.ofMinutes(20), now);
         Subtask subtask3 = new Subtask("–ü–æ–¥–∑–∞–¥–∞—á–∞ 3", "–û–ø–∏—Å–∞–Ω–∏–µ 3", Duration.ofMinutes(40), now.plusMinutes(15));

         List<Subtask> subtasks = List.of(subtask1, subtask2, subtask3);

         InMemoryTaskManager manager = new InMemoryTaskManager(); // üëà –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
         manager.updateEpicTimes(epic, subtasks);

         Duration expectedDuration = Duration.ofMinutes(30 + 20 + 40); // 90 –º–∏–Ω
         LocalDateTime expectedStart = now;
         LocalDateTime expectedEnd = subtask3.getEndTime();

         assertEquals(expectedDuration, epic.getDuration(), "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ø–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");
         assertEquals(expectedStart, epic.getStartTime(), "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");
         assertEquals(expectedEnd, epic.getEndTime(), "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");
     }


 }



